// StepAnimationPlugin
// Initial code generated by Softimage SDK Wizard
// Executed Tue Feb 24 10:08:34 UTC+0900 2015 by t.takeda
// 
// Tip: To add a command to this plug-in, right-click in the 
// script editor and choose Tools > Add Command.

function XSILoadPlugin( in_reg )
{
	in_reg.Author = "t.takeda";
	in_reg.Name = "StepAnimationPlugin";
	in_reg.Major = 1;
	in_reg.Minor = 0;

	in_reg.RegisterProperty("StepAnimation");

	//コマンドとメニュー登録
	in_reg.RegisterCommand("ToggleStepAnimation", "ToggleStepAnimation");
	in_reg.RegisterCommand("StoreAsStepAnimation1", "StoreAsStepAnimation1");
	in_reg.RegisterCommand("StoreAsStepAnimation2", "StoreAsStepAnimation2");
	in_reg.RegisterCommand("StoreAsStepAnimation3", "StoreAsStepAnimation3");
	in_reg.RegisterCommand("StoreAsStepAnimation4", "StoreAsStepAnimation4");
	in_reg.RegisterCommand("RemoveStepAnimation", "RemoveStepAnimation");

	// メニューの登録
	in_reg.RegisterMenu(siMenuTbAnimateActionsStoreID, "StepAnimation_Menu1", false, false);
	in_reg.RegisterMenu(siMenuTbAnimateActionsStoreID, "StepAnimation_Menu2", false, false);
	in_reg.RegisterMenu(siMenuTbAnimateActionsStoreID, "StepAnimation_Menu3", false, false);
	in_reg.RegisterMenu(siMenuTbAnimateActionsStoreID, "StepAnimation_Menu4", false, false);
	in_reg.RegisterMenu(siMenuTbAnimateActionsStoreID, "RemoveStepAnimation_Menu", false, false);
	//RegistrationInsertionPoint - do not remove this line

	return true;
}


function XSIUnloadPlugin( in_reg )
{
	var strPluginName;
	strPluginName = in_reg.Name;
	Application.LogMessage(strPluginName + " has been unloaded.",siVerbose);
	return true;
}

function StepAnimation_Define( in_ctxt )
{
	var oCustomProperty;
	oCustomProperty = in_ctxt.Source;
	oCustomProperty.AddParameter3("IsStepAnimation", siBool, true, null, null, false);
	return true;
}

function StepAnimation_DefineLayout( in_ctxt )
{
	var oLayout,oItem;
	oLayout = in_ctxt.Source;
	oLayout.Clear();
	oLayout.AddItem("IsStepAnimation", "ステップアニメ");
	
	return true;
}



function StepAnimation_IsStepAnimation_OnChanged()
{
	LogMessage("StepAnimation_IsStepAnimation_OnChanged !!");
	ToggleStepAnimation(PPG.IsStepAnimation.Model, PPG.IsStepAnimation.value);
}

function ToggleStepAnimation_Init( in_ctxt )
{
	var oCmd;
	oCmd = in_ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = false;
	var oArgs;
	oArgs = oCmd.Arguments;
	oArgs.Add( "Arg0", siArgumentInput, 0, siDispatch );
	oArgs.Add( "Arg1", siArgumentInput, true, siBool );
	
	return true;
}

function DoToggleStepAnimation(oModel, oIsStepAnimation)
{
	if(oModel.HasMixer() != false)
	{
		var oFullAnimClip = Dictionary.GetObject(oModel.Mixer+ ".Full_Anim_Track.FullAnimClip", false);
		var oStepAnimClip = Dictionary.GetObject(oModel.Mixer+ ".Step_Anim_Track.StepAnimClip", false);
		if(oFullAnimClip != null && oStepAnimClip != null)
		{
			if(oIsStepAnimation != false)
			{
				SetValse(oFullAnimClip+".action.weight",0.0,null);
				SetValse(oStepAnimClip+".action.weight",1.0,null);
			}
			else
			{
				SetValse(oFullAnimClip+".action.weight",1.0,null);
				SetValse(oStepAnimClip+".action.weight",0.0,null);
			}
		}
	}
}

function ToggleStepAnimation_Execute(oRootModel, oIsStepAnimation)
{
	DoToggleStepAnimation(oRootModel,oIsStepAnimation);
	
	var oModels = oRootModel.GetModels2(true);
	for(var i=0;i<oModels.count;i++)
	{
		var oModel = oModels(i);
		DoToggleStepAnimation(oModel,oIsStepAnimation);
	}
}

function StepAnimation_OnInit( )
{
	Application.LogMessage("StepAnimation_OnInit called",siVerbose);
}

function StepAnimation_OnClosed( )
{
	Application.LogMessage("StepAnimation_OnClosed called",siVerbose);
}

function StoreActionCommand_Init( in_ctxt )
{
	var oCmd;
	oCmd = in_ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;
	
	return true;
}

//初期化コールバック
function StoreAsStepAnimation1_Init( in_ctxt ){ return StoreActionCommand_Init(in_ctxt); }
function StoreAsStepAnimation2_Init( in_ctxt ){ return StoreActionCommand_Init(in_ctxt); }
function StoreAsStepAnimation3_Init( in_ctxt ){ return StoreActionCommand_Init(in_ctxt); }
function StoreAsStepAnimation4_Init( in_ctxt ){ return StoreActionCommand_Init(in_ctxt); }

//Fカーブを取得
function PickUpFCurve(oAnimParam,oObj,oNull,oExclusives)
{
	for(var i = 0 ; i < oExclusives.length ; i++)
	{	
		if(oObj.IsEqualTo(oExclusives[i]) != false)
		{
			return;
		}
	}
	//モデルがTimelineでは無くて、クラスもヌルじゃなくて、モデルの名前がタイムライン
	if(oObj.IsEqualTo(oNull) == false && ((oObj.IsClassOf(siNullID) != false && oObj.Name == sNullName) == false))
	{
		var oParams = oObj.NodeAnimatedParameters(siFCurveSource, true);

		for(i=0;i<oParams.count;i++)
		{
			var oParam = oParams(i);
			if(oParam.IsClassOf(siProxyParameterID) != false)//プロキシパラメータを除外※エラーになるので
			{
				continue;
			}
			var oSources = oParam.Sources;
			if(oSources.count > 1)
			{
				var oExcludes = false;
				for(var k=0;k<oSources.count.count;k)
				{
					var oSource = oSources(k);
					if(oSource.IsClassOf(siConstraintID) != false)
					{
						oExcludes = true;
						break;
					}
				}
				if(oExcludes != false)
				{
					continue;
				}
			}
			if(oParam.Model == null || oParam.Model.IsEqualTo(oObj.Model) == false)//マテリアルを除外
			{
				continue;
			}
			var oFullName = oParam.FullName;
			if(oFullName.indexOf(".l_fcv") >= 0 || oFullName.indexOf(".l_interp") >= 0 || oFullName.indexOf(".l_interpOri") >= 0)
			//リンクパラメーターを除外
			{
				var oParentObj = oPram.Parent;
				if(oParentObj != null && oParentObj.IsClassOf(siExpressionID) != false)
				{
					var oDefinition = oParentObj.Parameters("Definition").Value;
					if(oDefinition.indexOf("l_fcv") >= 0 || oDefinition.indexOf("l_interp") >= 0 || oDefinition.indexOf("l_interpOri") >= 0)
					//エクスプレッションを除外
					{
					continue;
					}
				}
			
			}
			oAnimParam.push(oParam)
		}
	}
	var oChildren = oObj.Children;
	for(var i = 0 ; i < oChildren.count ; i++)
	{
		var oChild = oChildren(i);
		if(oChild.type != siModelType)
			arguments.callee(oAnimParam, oChild, oNull, oExclusives);
	}
}

function DoStoreStepAnimations(oModel,oTimeCurve,oNull, oExceptBG)
{
	var FullActionName = "FullAnimSource";
	var oFullAnimSource;
	if(oModel.HasMixer() != false)//フルアニメのソース取得
	{
		oFullAnimSource = Dictionary.GetObject("Sources" + oModel + "." + FullActionName,false);
	}
	if(oFullAnimSource == null)
	{
		var oExclusives = [];//今は使わないが、指定物をここに格納すると除外する事が可能
		if(oExceptBG)
		{
			var oBgCameras = ActiveSceneRoot.FindChildren2("*_BG", "", siCameraFamily, true);
			for(var i = 0 ; i < oBgCameras.count ; i++)
			{
				var oBgCamera = oBgCameras(i);
				oExclusives.push(oBgCamera);

				var oParent = oBgCamera.Parent3DObject;
				if(oParent.type == siCameraRootPrimType)
				{
					oExclusives.push(oParent);
					var oInterests = oParent.FindChildren2("", "", "", false);
					for(var j = 0 ; j < oInterests.count ; j++)
					{
						var oInterest = oInterests(j);
						if(oInterest.type == "CameraInterest")
							oExclusives.push(oInterest);
					}
				}
			}
		}
		var oParamList = [];
		PickUpFCurve(oParamList,oModel,oNull,oExclusives);
		if(oParamList.length == 0)
		{
			return;
		}
		var oInputObjs = oParamList.join(",");
		oFullAnimSource = SIStoreAction(oModel, oInputObjs, 2, FullActionName, true, true, oPlayControl_GlobalIn, oPlayControl_GlobalOut);
		
		if(oModel.HasMixer() != false)
			DeleteUnusedMixerTracks(oModel.Mixer);
	}
	var oMixer = oModel.Mixer;
	if(oModel.IsEqualTo(oNull.Model) != false)//カスタムプロパティ作成
	{
		var oCustomProperty = Dictionary.GetObject(oModel + "." + sPropertyName,false);
		if(oCustomProperty != null)
		{DeleteObj(oCustomProperty);}
		oModel.AddProperty("StepAnimation",false,sPropertyName)
	}

	var StepActionName = "StepAnimSource";
	var oStepAnimationSource = Dictionary.GetObject("Sources." + oModel + "." + StepActionName,false);
	if(oStepAnimationSource != null)
	{
		DeleteObj(oStepAnimationSource);
	}
	
	
	//ミキサーをコピーして、これを「TimeLineヌル」に従ってステップ化させる
	var oCopyObj = SIDuplicate(oFullAnimSource,1);
	var oStepAnimationSource = oCopyObj(0);//↑でデリートしているので、再度宣言から
	oStepAnimationSource.Name = StepActionName;
	var oSourceItems = oStepAnimationSource.SourceItems;
	for(var u=0;u<oSourceItems.count;u++)
	{
		var oSourceItem = oSourceItems(u);
		if(oSourceItem.type == siFCurveAnimItem)
		{
			var oFCurve = oSourceItem.Source;
			if(oFCurve.Locked != false)
			{
				continue;//ロックされているモノはスルー
			}
			oFCurve.Resample(oPlayControl_GlobalIn, oPlayControl_GlobalOut, 1);//リサンプルしてフルフレームへ
			if(oFCurve.type == siStandardFCurve)//コンスタント補間へ変換
			{
				oFCurve.Interpolation = siConstantInterpolation;
				oFCurve.Extrapolation = siConstantExtrapolation;
			}
			var oNumKeys = oTimeCurve.GetNumKeys();//「timeline」に設定されたキーのスタートエンドをを取得(キーの数）
			if(oNumKeys > 1)
			{
				var EndKeyCount = oNumKeys-1;
				for(var g=0;g<EndKeyCount;g++)
				{
					var oLeft = oTimeCurve.GetKeyAtIndex(g);
					var oRight = oTimeCurve.GetKeyAtIndex(g+1);
					if(oRight.Time - oLeft.Time > 0.5)//左右のキーで同じフレームを取得しないように条件文
					{
						oFCurve.RemoveKeys(oLeft.Time+0.9,oRight.Time-0.9);//サブフレームを除外してキーを削除していく
					}
				}
			}
		}
	}
	ApplyAction(oStepAnimationSource, null, null, null, null, null, null);//Stepを適用
	var AnimTrackName = "Full_Anim_Track";
	var oAnimTrack = Dictionary.GetObject(oMixer + "." + AnimTrackName,false);
	if(oAnimTrack == null)
	{
		var oInsertPoint = null;
		oAnimTrack = AddTrack(oModel,oMixer,0,AnimTrackName,oInsertPoint);
	}
	var AnimClipName = "FullAnimClip";
	var oAnimClip = Dictionary.GetObject(oAnimTrack + "." + AnimClipName,false);
	if(oAnimTrack == null)
	{
		oAnimClip = AddClip(oModel,oAnimSource,null,oAnimTrack,oPlayControl_GlobalIn, AnimClipName)
	}
	//ステップのトラックが残っていると重複していくので一旦削除
	var AnimTrackName = "Full_Anim_Track";
	var oAnimTrack = Dictionary.GetObject(oMixer + "." + AnimTrackName, false);
	if(oAnimTrack == null)
	{
		DeleteObj(oAnimTrack);
	}
	var oClips = oMixer.Clips;
	for(var p=0;p<oClips.count;p++)
	{
		var oClip = oClips(p);
		if(oClip.type == siClipAnimationType)
		{
			SetValue(oClip + ".actionclip.weight", 0, null);
		}
	}
	var oStepAnimTrack = AddTrack(oModel, oMixer, 0, AnimTrackName, null);
	var oStepAnimClip = AddClip(oModel, oStepAnimationSource, null, oStepAnimTrack, oPlayControl_GlobalIn, "StepAnimClip");

	SetValue(oStepAnimClip + ".actionclip.weight", 1, null);
	SetValue(oMixer + ".CompoundContainer.mixer.normalize", false, null);//アニメーションレイヤーで加算できるように設定
}

function GetTimeLineNull(oModel, oIsPickElement)
{
	var sNullFullName = oModel + "." + sNullName;
	var oNull = Dictionary.GetObject(sNullFullName,false);
	if(oNull == null)
	{
		return null;
	}
	var oAnimatedParameters = oNull.NodeAnimatedParameters(siFCurveSource, true);
	if(oAnimatedParameters.count == 0)//ヌルのエラーチェック
	{
		//Application.XSIUIToolkit.Msgbox( "timelineヌルにキーがありません", siMsgOkOnly | siMsgQuestion, "警告" );
		return null;
	}
	var oTimeParameter = oAnimatedParameters(0);
	var oTimeCurve = oTimeParameter.Source;
	if(oTimeCurve.IsClassOf(siMixerID) != false)
	{
		//Application.XSIUIToolkit.Msgbox( "timelineがミキサー駆動になっております。\nプロットかキーイング後、ミキサーの削除をお願いします", siMsgOkOnly | siMsgQuestion, "警告" );
		return null;
	}
	return [oNull,oTimeCurve];
}

//Main(実行)関数
function StoreActionCommand_Execute(oMulti,oLocal, oExceptBG)
{
	var oRemoteControl = ActiveProject.Properties("Play Control");
	oPlayControl_In = oRemoteControl.Parameters("In").Value;
	oPlayControl_Out = oRemoteControl.Parameters("Out").Value;
	oPlayControl_GlobalIn = oRemoteControl.Parameters("GlobalIn").Value;
	oPlayControl_GlobalOut = oRemoteControl.Parameters("GlobalOut").Value;
	
	sNullName = "timeline";
	var oModel = ActiveSceneRoot;
	if(selection.count != 0)//変数にモデルを格納
	{
		if(Selection(0).IsClassOf(siModelID) != false)
		{
			oModel = selection(0);
		}
		else if(Selection(0).IsClassOf(siX3DObjectID) != false)
		{
			oModel = selection(0).Model;
		}
	}
	var oResult = GetTimeLineNull(oModel, true);//ヌルとアニメーション取得
	if(oResult == null && oLocal == false)
	{
		var sNullFullName = oModel + "." + sNullName;
		return false;
	}
	var oNull,oTimeCurve;
	if(oResult != null)
	{
		oNull = oResult[0];//ヌル
		oTimeCurve = oResult[1];//アニメーション
		if(oNull != null)
		{
			oModel = oNull.Model;
		}
	}
	
	sPropertyName = "StepAnimProperty";
	var oCustomProperty = Dictionary.GetObject(oModel + "." + sPropertyName,false)
	if(oCustomProperty == null)
	{ActiveSceneRoot.AddProperty("StepAnimation",false,sPropertyName);}
	if(oNull != null && oTimeCurve != null)
	{
		var oRootModel = oNull.Model;
		DoStoreStepAnimations(oRootModel, oTimeCurve, oNull, oExceptBG);
	}
	if(oMulti != false)
	{
		var oRootModel = oModel;

		// 選択の子階層のモデル群をステップアニメーション化
		var oModels = oRootModel.GetModels2(false);
		for(var i = 0 ; i < oModels.count ; i++)
		{
			var oModel = oModels(i);
			SwapModels(oModel, oTimeCurve, oNull, oLocal, oExceptBG);
		}
	}

	return true;
}

function SwapModels(oModel, oTimeCurve, oNull, oLocal, oExceptBG)
{
	if(oLocal != false)//ローカル優先時の処理
	{
		var oResult = GetTimeLineNull(oModel, false);
		if(oResult != null)
		{
			oNull = oResult[0];
			oTimeCurve = oResult[1];
		}
	}
	if(oNull != null)
	{
		DoStoreStepAnimations(oModel, oTimeCurve, oNull, oExceptBG);
	}
	var oModels = oModel.GetModels2(false)
	for(var d=0;d<oModels.count;d++)
	{
		var oChildModel = oModels(d);
		arguments.callee(oChildModel,oTimeCurve,oNull, oLocal, oExceptBG)
	}
}

function StoreAsStepAnimation1_Execute(){ return StoreActionCommand_Execute(false, false, true); }
function StoreAsStepAnimation2_Execute(){ return StoreActionCommand_Execute(true, false, false); }
function StoreAsStepAnimation3_Execute(){ return StoreActionCommand_Execute(true, true, true); }
function StoreAsStepAnimation4_Execute(){ return StoreActionCommand_Execute(true, false, true); }

function RemoveStepAnimation_Init( in_ctxt )
{
	var oCmd;
	oCmd = in_ctxt.Source;
	oCmd.Description = "";
	oCmd.ReturnValue = true;

	return true;
}

function RestoreFullAnimation(oModel)
{
	if(oModel == null || oModel.HasMixer() == false)//ミキサーの有無確認
	{return false}
	var oMixer = oModel.Mixer;
	var sActionName = "FullAnimSource";
	var oFullAnimationSource = Dictionary.GetObject("Sources." + oModel + "." + sActionName, false);
	if(oFullAnimationSource == null)//ミキサーが取れなければ終了
	{return false;}
	ApplyAction(oFullAnimationSource);//元アニメに復元
	
	var sAnimationTrackName = "Full_Anim_Track";
	var oAnimationTrack = Dictionary.GetObject(oMixer + "." + sAnimationTrackName, false);
	if(oAnimationTrack != null)
		{DeleteObj(oAnimationTrack);}
	var sAnimationTrackName = "Step_Anim_Track";
	var oAnimationTrack = Dictionary.GetObject(oMixer + "." + sAnimationTrackName, false);
	if(oAnimationTrack != null)
		{DeleteObj(oAnimationTrack);}
		
	DeleteObj(oFullAnimationSource);
	
	var sStepActionName = "Step_Anim_Source";//ステップアニメのソースを削除
	var oStepAnimationSource = Dictionary.GetObject("Sources." + oModel + "." + sStepActionName, false);
	if(oStepAnimationSource != null)
		{DeleteObj(oStepAnimationSource);}
	
	var sPropertyName = "StepAnimProperty";
	var oCustomProperty = Dictionary.GetObject(oModel + "." + sPropertyName, false);
	if(oCustomProperty != null)
		{DeleteObj(oCustomProperty);}
}

function RemoveStepAnimation_Execute()
{
	SetUserPref(siAutoInspect, false);
	var oRootModel = ActiveSceneRoot;
	RestoreFullAnimation(oRootModel);
	var oModels = oRootModel.GetModels2();
	for(var i=0;i<oModels.count;i++)
	{
		var oModel = oModels(i);
		RestoreFullAnimation(oModel)
	}
}

function StepAnimation_Menu1_Init( in_ctxt )
{
	var oMenu;
	oMenu = in_ctxt.Source;
	oMenu.AddCommandItem("ステップアニメへ変換 - 選択モデルのみ", "StoreAsStepAnimation2");
	return true;
}

function StepAnimation_Menu2_Init( in_ctxt )
{
	var oMenu;
	oMenu = in_ctxt.Source;
	oMenu.AddCommandItem("ステップアニメへ変換 - すべてのモデル(親優先) - 全オブジェクト", "StoreAsStepAnimation2");
	return true;
}

function StepAnimation_Menu3_Init( in_ctxt )
{
	var oMenu;
	oMenu = in_ctxt.Source;
	oMenu.AddCommandItem("ステップアニメへ変換 - すべてのモデル(ローカル優先)", "StoreAsStepAnimation3");
	return true;
}

function StepAnimation_Menu4_Init( in_ctxt )
{
	var oMenu;
	oMenu = in_ctxt.Source;
	oMenu.AddCommandItem("ステップアニメへ変換 - すべてのモデル(親優先) - BGカメラを除外", "StoreAsStepAnimation4");
	return true;
}

function RemoveStepAnimation_Menu_Init( in_ctxt )
{
	var oMenu;
	oMenu = in_ctxt.Source;
	oMenu.AddCommandItem("ステップアニメを削除", "RemoveStepAnimation");
	return true;
}